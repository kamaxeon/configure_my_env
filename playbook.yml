---
- hosts: localhost
  become: true

  pre_tasks:
    - name: PRETASK | Update apt cache 
      apt: 
        update_cache: yes 
        cache_valid_time: 3600
      when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'
      tags:
        - base_packages
        - zsh
        - python
        - vim
        - docker
        - vagrant
        - virtualbox
        - password_management
        - chrome
        - tmux

    - name: PRETASK | Get username
      shell: whoami
      register: get_username
      tags:
        - zsh
        - docker

  tasks:
  # Minimum packages
  - name: BASE | Install base packages
    package:
      name: "{{ item }}"
    with_items:
      - vim
      - git
    tags:
      - base_packages

  # Sudo
  - name: SUDO | Enable passwordless
    lineinfile:
      path: /etc/sudoers
      state: present
      regexp: '^%sudo'
      line: '%sudo ALL=(ALL) NOPASSWD: ALL'
      validate: 'visudo -cf %s'
    tags:
      - sudo

  # Git
  - name: GIT | Copy global config file
    copy:
      src: ./dotfiles/gitconfig
      dest: ~/.gitconfig
    become: false
    tags:
      - git

  - name: GIT | Copy global ignore file
    copy:
      src: ./dotfiles/gitignore
      dest: ~/.gitignore
    become: false
    tags:
      - git

  # zsh
  - name: ZSH | Install zsh
    package: 
      name: zsh
    tags:
      - zsh

  - name: ZSH | Install oh my zsh
    git:
      repo: https://github.com/robbyrussell/oh-my-zsh.git
      dest: ~/.oh-my-zsh
    become: false
    tags:
      - zsh

  - name: ZSH | Copy zshrc
    copy:
      src: ./dotfiles/zshrc
      dest: ~/.zshrc
    become: false
    tags:
      - zsh

  - name: ZSH | Config /bin/zsh in the user
    user:
      name: "{{ get_username.stdout }}"
      shell: /bin/zsh
    tags:
      - zsh

  # Install python
  - name: PYTHON | Install python packages
    package:
      name: "{{ item }}"
    with_items:
      - gcc
      - cmake
      - patch
      - flake8
      - python3-dev
      - python3-pip
      - python3-virtualenv
      - python-dev
      - python-pip
      - python-virtualenv
    tags:
      - python

  - name: PYTHON | Install pyenv
    git:
      repo: https://github.com/yyuu/pyenv.git
      dest: ~/.pyenv
    become: false
    tags:
      - python

  - name: PYTHON | Add pyenv path to zsh
    lineinfile:
      dest: ~/.zshrc
      state: present
      create: yes
      line: "{{ item }}"
    with_items:
      - 'export PYENV_ROOT="$HOME/.pyenv"'
      - 'export PATH="$PYENV_ROOT/bin:$PATH"'
      - 'eval "$(pyenv init -)"'
    become: false
    tags:
      - python
    
  # VIM (Based on https://realpython.com/vim-and-python-a-match-made-in-heaven/)
  - name: VIM | Install packages
    package:
      name: "{{ item }}"
    with_items:
      - fonts-powerline
      - python-autopep8
      - yapf
    tags:
      - vim

  - name: VIM | Install Vundle
    git:
      repo: https://github.com/gmarik/Vundle.vim.git
      dest: ~/.vim/bundle/Vundle.vim
    become: false
    tags:
      - vim

  - name: VIM | Copy vimrc
    copy:
      src: ./dotfiles/vimrc
      dest: ~/.vimrc
    become: false
    tags:
      - vim
  
  - name: VIM | Install vundle plugin
    shell: vim +PluginInstall +qall
    become: false
    tags:
      - vim

  - name: VIM | Clean all old vundle plugin
    shell: vim +PluginClean +qall
    become: false
    tags:
      - vim
 
  - name: VIM | Fix YouCompleteMe
    command: ./install.py
    args:
      chdir: ~/.vim/bundle/YouCompleteMe
      creates: ~/.vim/bundle/YouCompleteMe/third_party/ycmd/third_party/cregex/regex_2/_regex.so
    become: false
    tags:
      - vim

  - name: VIM | Install powerline for vim
    pip:
      name: powerline-status
      executable: pip3
      extra_args: --user
    become: false
    tags:
      - vim

  # Docker
  - name: DOCKER | Remove all docker packages
    package:
      name: "{{ item }}"
    with_items:
      - docker
      - docker.io
    tags:
      - docker

  - name: DOCKER | Add Docker GPG Key
    apt_key:
      url: https://download.docker.com/linux/ubuntu/gpg
    tags:
      - docker

  - name: DOCKER | Add Docker Repository
    apt_repository:
      repo: deb [arch=amd64] https://download.docker.com/linux/ubuntu "{{ansible_distribution_release}}" stable  
    tags:
      - docker

  - name: DOCKER | Install packages
    package:
      name: "{{ item }}"
      update_cache: yes
    with_items:
      - apt-transport-https
      - ca-certificates
      - curl
      - software-properties-common
      - docker-ce
    tags:
      - docker

  - name: DOCKER | Add user to docker group
    user:
      name: "{{ get_username.stdout }}"
      groups: docker
      append: yes
    tags:
      - docker

  - name: VIRTUALBOX | Add Virtualbox GPG Keys
    apt_key:
      url: "{{ item }}"
    with_items:
      - https://www.virtualbox.org/download/oracle_vbox_2016.asc
      - https://www.virtualbox.org/download/oracle_vbox.asc
    tags:
      - virtualbox 

  - name: VIRTUALBOX | Add Virtualbox Repository
    apt_repository:
      repo: deb [arch=amd64] https://download.virtualbox.org/virtualbox/debian "{{ansible_distribution_release}}" contrib 
    tags:
      - virtualbox

  - name: VIRTUALBOX | Uninstall distro packages
    package:
      name: virtualbox
      state: absent
    tags:
      - virtualbox

  - name: VIRTUALBOX | Install packages from virtualbox.org
    package:
      name: "{{ item }}"
    with_items:
        - virtualbox-5.2
        - "linux-headers-{{ansible_kernel}}"
    tags:
      - virtualbox

  - name: VAGRANT | Install packages
    package:
      name: "{{ item }}"
    with_items:
        - vagrant
        - vagrant-lxc
        - vagrant-mutate
        - vagrant-sshfs
    tags:
      - vagrant

  # Dropbox
  - name: DROPBOX | Add Dropbox key
    apt_key:
      keyserver: pgp.mit.edu
      state: present
      id: 1C61A2656FB57B7E4DE0F4C1FC918B335044912E
    tags:
       dropbox

  - name: DROPBOX | Add Dropbox Repository
    apt_repository:
      repo: deb [arch=amd64] http://linux.dropbox.com/ubuntu/ xenial main # Does not existe packages for bionic
    tags:
      - dropbox

  - name: DROPBOX | Install dropbox
    package:
      name: "{{ item }}"
    with_items:
      - python-gpg
      - dropbox
    tags:
      - dropbox

  # Pasaffe (Password management)
  - name: PASAFFE | Install pasaffe
    package:
      name: pasaffe
    tags:
      - password_management

  # Install Chrome
  - name: CHROME | Install dependencies
    package:
      name: "{{ item }}"
    with_items:
      - libxss1 
      - libappindicator1 
      - libindicator7
    tags:
      - chrome

  - name: CHROME | Install chrome
    apt:
      deb: https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb
    tags:
      - chrome

  # TMUX | Install tmux
  - name: TMUX | Install tmux
    package:
      name: "{{ item }}"
    with_items:
      - tmux
      - powerline
    tags:
      - tmux
  - name: TMUX | Install theme
    git:
      repo: https://github.com/jimeh/tmux-themepack.git 
      dest: ~/.tmux-themepack 
    become: false
    tags:
      - tmux

  - name: TMUX | Copy tmux config file
    copy:
      src: ./dotfiles/tmux.conf
      dest: ~/.tmux.conf
    become: false
    tags:
      - tmux

  - name: TMUX | Ensure xterm-256color-italic is installed
    stat:
      path: ~/.terminfo/x/xterm-256color-italic
    register: file_italic
    become: false
    tags:
      - tmux


  - name: TMUX | Download terminfo
    get_url:
      url: https://gist.githubusercontent.com/sos4nt/3187620/raw/8e13c1fec5b72d415ed2917590348451de5f8e58/xterm-256color-italic.terminfo
      dest: /tmp/xterm-256color-italic.terminfo
    when: file_italic.stat.exists is not defined
    become: false
    tags:
      - tmux

  - name: TMUX | Compile terminfo
    command: tic /tmp/xterm-256color-italic.terminfo
    when: file_italic.stat.exists is not defined
    become: false
    tags:
      - tmux
